package Facades;import Beans.Company;import Beans.Coupon;import Beans.Customer;import DBDAO.CompaniesDBDAO;import DBDAO.CouponDBDAO;import DBDAO.CustomerDBDAO;import Exceptions.GrooponSystemException;import java.util.List;/** * Administrator facade - Allow the administrator to use his skills */public class AdminFacade extends ClientFacade {    /**     * Constructor no args -     * initialisation of companiesDAO, couponDAO, and customerDAO     */    public AdminFacade() {        this.companiesDAO = new CompaniesDBDAO();        this.customerDAO = new CustomerDBDAO();        this.couponDAO = new CouponDBDAO();    }    /**     * Method that check if the email and the password are correct     *     * @param email    of the user     * @param password of the user     * @return true if the email and the password are true     */    @Override    public boolean login(String email, String password) {        // email and password of admin always like this        String EMAIL = "admin@admin.com";        String PASSWORD = "admin";        // check if its right        return email.equals(EMAIL) && password.equals(PASSWORD);    }    /**     * Method to allow administrator to add a new company     *     * @param company company that he want to add     */    public void addCompany(Company company) {        // get all companies from the system        try {            List<Company> companies = companiesDAO.getAllCompanies();            for (Company item : companies) {                // check if company with same email or password is not already exist                if (company.getName().equals(item.getName()) || company.getEmail().equals(item.getEmail())) {                    throw new GrooponSystemException("ERROR! Name or Email for " + item.getName() + " is already exist for another company!");                }            }            // add the company to the system            companiesDAO.addCompany(company);        }catch (Exception e){            System.err.println(e.getMessage());        }    }    /**     * Method to allow administrator to update company from the system     * @return true if company was updated     * @param company company he want to update     */    public boolean updateCompany(Company company)  {        try {            //check if company we want to update exist in the system            if (companiesDAO.getOneCompany(company.getId()) != null) {                // if company exist check if changes have been made                companiesDAO.updateCompany(company);                return true;            }        }catch (Exception err){            System.err.println(err.getMessage());        }        return false;    }    /**     * Method to allow administrator to remove company     *     * @param companyId company id that he wants to remove     * @return true is company was removed     */    public boolean deleteCompany(int companyId)  {       try {           //get list of coupons of the company we want to delete           List<Coupon> coupons = couponDAO.getCompanyCouponsList(companyId);           // if the company has coupons           if (coupons != null) {               // get all this coupons               for (Coupon item : coupons) {                   //for each coupon get the list of customers that purchase this one                   List<Customer> customers = couponDAO.getCouponCustomersList(item.getId());                   // for each customer that purchase this coupon                   for (Customer index : customers) {                       //delete the history purchase                       couponDAO.deleteCouponPurchase(index.getId(), item.getId());                   }                   //delete this coupon from the data base                   couponDAO.deleteCoupon(item.getId());               }           }           // finally delete the company           return companiesDAO.deleteCompany(companyId);       }catch (Exception err){           System.err.println(err.getMessage());       }       return false;    }    /**     * Method to allow administrator to get list of all companies of the system     *     * @return list of all the companies     */    public List<Company> getAllCompanies()  {        try {            // get list of the companies            List<Company> companies = companiesDAO.getAllCompanies();            for (Company item : companies) {                item.setCoupons(couponDAO.getCompanyCouponsList(item.getId()));            }            return companies;        }catch (Exception err){            System.err.println(err.getMessage());        }        return null;    }    /**     * Method allow admin to get one company by his id     *     * @param companyId id of the company he wants to get     * @return this company     */    public Company getOneCompany(int companyId) {        try {            // check if the company is exist            if (companiesDAO.getOneCompany(companyId) != null) {                // if yes return it                return companiesDAO.getOneCompany(companyId);            }        }catch (Exception err){            System.err.println(err.getMessage());        }        return null;    }    /**     * Method to allow admin to add customer to the system     *     * @param customer customer that he wants to add     */    public void addCustomer(Customer customer) {        try {            // get all customers of the system            List<Customer> customers = customerDAO.getAllCustomers();            for (Customer item : customers) {                // check if the email is not already used by someone else                if (customer.getEmail().equals(item.getEmail())) {                    throw new GrooponSystemException("ERROR! Customer email for " + customer.getFirstName() + " " + customer.getLstName() + " is already exist for another customer! ");                }            }            // add the customer to the system            customerDAO.addCustomer(customer);        }catch (Exception err){            System.err.println(err.getMessage());        }    }    /**     * Method that allow admin to update customer     * @return true if customer was updated     * @param customer that admin wants to update     */    public boolean updateCustomer(Customer customer) {        try {            // get the customer details from the data base            Customer customer1 = customerDAO.getOneCustomer(customer.getId());            // check if we have changes for this customer            if (customer1 != null) {                // send changes and update the customer in the database                customerDAO.updateCustomer(customer);                return true;            }        }catch (Exception err){            System.err.println(err.getMessage());        }        return false;    }    /**     * Method that allow admin to remove customer from the system     *     * @param customerId id of the customer he wants to remove     * @return true if customer was removed     */    public boolean deleteCustomer(int customerId) {        try {            //get the customer purchase coupons list            List<Coupon> coupons = couponDAO.getCustomerCouponsList(customerId);            // delete all coupons            for (Coupon item : coupons) {                couponDAO.deleteCoupon(item.getId());            }            // remove the customer            return customerDAO.deleteCustomer(customerId);        }catch (Exception err){            System.err.println(err.getMessage());        }        return false;    }    /**     * Method that allow admin to get all the customers of the system     *     * @return list of all the customer of the system     */    public List<Customer> getAllCustomers(){        try {            // get all customers list            List<Customer> customers = customerDAO.getAllCustomers();            for (Customer item : customers) {                item.setCoupons(couponDAO.getCustomerCouponsList(item.getId()));            }            return customers;        }catch (Exception err){            System.err.println(err.getMessage());        }        return null;    }    /**     * Method that allow admin to get one customer by his id     *     * @param customerId id of the customer he wants to get     * @return customer object     */    public Customer getOneCustomer(int customerId) {        try {            // check if the customer exist is the data base            if (customerDAO.getOneCustomer(customerId) != null) {                // return it                return customerDAO.getOneCustomer(customerId);            }        }catch (Exception err){            System.err.println(err.getMessage());        }        return null;    }}